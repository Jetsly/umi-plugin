import Vue from 'vue';
import * as core from 'dva-core';
import createLoading from 'dva-loading';
import clonedeep from 'lodash.clonedeep'
import isequal from 'lodash.isequal'

const char = '/';

const getNestedState = (state, path) =>
  path
    .split(char)
    .filter(a => a)
    .reduce((state, key) => state[key], state);

const normalizeNamespace = fn => (namespace, map) => {
  if (typeof namespace !== 'string') {
    map = namespace;
    namespace = '';
  } else if (namespace.charAt(namespace.length - 1) !== char) {
    namespace += char;
  }
  return fn(namespace, map);
};

const normalizeMap = map =>
  Array.isArray(map)
    ? map.map(key => ({ key: key, val: key }))
    : Object.keys(map).map(key => ({ key: key, val: map[key] }));

const createOpts = {
  setupApp(app) {
    app._history = window.g_history;
  },
};
let app = core.create({
  {{{ExtendDvaConfig}}}
},createOpts);

app.use(createLoading());
{{{RegisterPlugins}}}
{{{RegisterModels}}}
app.start()

window.g_app = app;

let store = app._store;

store._vm = new Vue({
  data: {
    $$state: clonedeep(store.getState())
  },
});

store.subscribe(() => {
  const state = clonedeep(store.getState());
  Object.keys(state).forEach(namespace => {
    Object.keys(state[namespace]).forEach(key => {
      if (!isequal(store._vm._data.$$state[namespace][key],state[namespace][key])) {
        store._vm._data.$$state[namespace][key] = state[namespace][key];
      }
    });
  });
});

export const dispatch = store.dispatch.bind(store);

export const mapState = normalizeNamespace((namespace, states) => {
  let res = {};
  normalizeMap(states).forEach(({ key, val }) => {
    res[key] = function mappedState() {
      const _state = getNestedState(store._vm._data.$$state, namespace);
      return typeof val === 'function' ? val(_state) : getNestedState(_state, val);
    };
  });
  return res;
});
